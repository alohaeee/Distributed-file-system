version: "2"

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      #KAFKA_CREATE_TOPICS: "topic-test:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  # первый экземпляр (имя может быть любым, по нему происходит обращение к хосту в виртуальной сети, см. peers.yaml
  webjs0:
    # Задаём переменные среды. ID-идентификатор узла. PYTHONUNBUFFERED позволяет видеть вывод от print
    environment:
      - ID=0
    # Указываем образ (в данном случае говорим его собрать из текущей директории)
    build: .
    # Связываем порт 8000 компьютера (127.0.0.1) и порт 8000 контейнера (именно в этом порядке)
    ports:
      - "8080:8080"
    volumes:
      # для nodemon
      - ./src:/app/src
      # папка для контента общая и находится на хосте
      - ./uploads:/app/uploads
     # Устанавливаем зависимость
    depends_on: ["kafka", "zookeeper"]
  webjs1:
    # Задаём переменные среды. ID-идентификатор узла. PYTHONUNBUFFERED позволяет видеть вывод от print
    environment:
      - ID=1
    # Указываем образ (в данном случае говорим его собрать из текущей директории)
    build: .
    ports:
      - "8081:8080"
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
     # Устанавливаем зависимость
    depends_on: ["kafka", "zookeeper"]
  webjs2:
    # Задаём переменные среды. ID-идентификатор узла. PYTHONUNBUFFERED позволяет видеть вывод от print
    environment:
      - ID=2
    # Указываем образ (в данном случае говорим его собрать из текущей директории)
    build: .
    ports:
      - "8082:8080"
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
    # Устанавливаем зависимость
    depends_on: ["kafka", "zookeeper"]