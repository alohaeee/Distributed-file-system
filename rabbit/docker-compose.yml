version: "2"

services:
   # Сервер очереди
  rabbit:
    # Указываем образ
    image: rabbitmq:3
    # Задаём хостнейм (дескриптор сервера очереди, нужно в случае, если у вас несколько таких контейнеров)
    hostname: "hello-rabbit"
    # Задаём метку для докера
    labels:
      NAME: "hello-rabbit"
  # первый экземпляр (имя может быть любым, по нему происходит обращение к хосту в виртуальной сети, см. peers.yaml
  webjs0:
    # Задаём переменные среды. ID-идентификатор узла. PYTHONUNBUFFERED позволяет видеть вывод от print
    environment:
      - ID=0
    # Указываем образ (в данном случае говорим его собрать из текущей директории)
    build: .
    # Связываем порт 8000 компьютера (127.0.0.1) и порт 8000 контейнера (именно в этом порядке)
    ports:
      - "8080:8080"
    volumes:
      # для nodemon
      - ./src:/app/src
      # папка для контента общая и находится на хосте
      - ./uploads:/app/uploads
     # Устанавливаем зависимость
    depends_on: ["rabbit"]
  webjs1:
    # Задаём переменные среды. ID-идентификатор узла. PYTHONUNBUFFERED позволяет видеть вывод от print
    environment:
      - ID=1
    # Указываем образ (в данном случае говорим его собрать из текущей директории)
    build: .
    ports:
      - "8081:8080"
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
     # Устанавливаем зависимость
    depends_on: ["rabbit"]
  webjs2:
    # Задаём переменные среды. ID-идентификатор узла. PYTHONUNBUFFERED позволяет видеть вывод от print
    environment:
      - ID=2
    # Указываем образ (в данном случае говорим его собрать из текущей директории)
    build: .
    ports:
      - "8082:8080"
    volumes:
      - ./src:/app/src
      - ./uploads:/app/uploads
    # Устанавливаем зависимость
    depends_on: ["rabbit"]